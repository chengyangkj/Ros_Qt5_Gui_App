name: AutoRelease

on:
  workflow_run:
    workflows: 
      - "ROS2:Humble(22.04)"
      - "ROS2:Foxy(20.04)"
      - "ROS2:Galactic(20.04)"
      - "ROS1:Noetic(20.04)"
      - "ROS1:Melodic(18.04)"
    types:
      - completed
    tags:
      - 'v*'

jobs:
  create_release:
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        id: get_tag
        run: |
          TAG_NAME=$(echo "${{ github.event.workflow_run.head_branch }}" | sed 's/refs\/tags\///')
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
            }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: Release ${{ steps.get_tag.outputs.tag_name }}
          draft: false
          prerelease: false

      - name: Unzip Artifacts
        run: |
          for zip in *.zip
          do
            unzip "$zip"
          done

      - name: Upload Release Assets
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            
            const files = fs.readdirSync('.');
            for (const file of files) {
              if (file.endsWith('.tar.gz')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: fs.readFileSync(file)
                });
              }
            }